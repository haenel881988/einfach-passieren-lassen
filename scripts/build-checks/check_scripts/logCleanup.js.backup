// check_scripts/logCleanup.js
// Ausgelagertes Logfile-Cleanup für Build-Checks
// Erstellt: 2025-07-02
// Führt Logfile-Bereinigung durch und schreibt Logfile in logfiles/

const fs = require('fs');
const path = require('path');

function runLogCleanup() {
    const logName = `logCleanup_${new Date().toISOString().replace(/[:.]/g, '-').split('T').join('_').replace(/Z$/, '')}.log`;
    const logPath = path.join(__dirname, '../logfiles', logName);
    const logDir = path.join(__dirname, '../../../docs/015_build_logs');
    const archiveDir = path.join(__dirname, '../../../docs/016_log_archive');
    let cleaned = 0, archived = 0;
    if (!fs.existsSync(logDir)) return;
    if (!fs.existsSync(archiveDir)) fs.mkdirSync(archiveDir, { recursive: true });
    const logs = fs.readdirSync(logDir)
        .filter(file => file.startsWith('BUILD_LOG_') && file.endsWith('.md'))
        .map(file => ({
            filename: file,
            path: path.join(logDir, file),
            timestamp: extractTimestamp(file),
            stats: fs.statSync(path.join(logDir, file))
        }))
        .sort((a, b) => a.timestamp - b.timestamp);
    const keepRecent = 5, keepBest = 3;
    if (logs.length <= keepRecent + keepBest) return;
    const recentLogs = logs.slice(-keepRecent);
    const oldLogs = logs.slice(0, -keepRecent);
    const bestLogs = oldLogs.sort((a, b) => a.stats.size - b.stats.size).slice(0, keepBest);
    const bestFilenames = new Set(bestLogs.map(log => log.filename));
    const toDelete = oldLogs.filter(log => !bestFilenames.has(log.filename));
    for (const log of bestLogs) {
        const archivePath = path.join(archiveDir, `ARCHIVE_${log.filename}`);
        try { fs.renameSync(log.path, archivePath); archived++; } catch (e) {}
    }
    for (const log of toDelete) {
        try { fs.unlinkSync(log.path); cleaned++; } catch (e) {}
    }
    const logContent = [
        `# Logfile Cleanup Report (${new Date().toLocaleString('de-DE')})`,
        `Archiviert: ${archived}`,
        `Gelöscht: ${cleaned}`,
        `Behalten: ${recentLogs.length}`
    ].join('\n');
    fs.writeFileSync(logPath, logContent, 'utf8');
    console.log(`Logfile-Cleanup abgeschlossen. Logfile: ${logPath}`);
}

function extractTimestamp(filename) {
    const match = filename.match(/BUILD_LOG_(\d{4}-\d{2}-\d{2})_(\d{6})\.md/);
    if (!match) return new Date(0);
    const [, date, time] = match;
    const hour = time.substring(0, 2);
    const minute = time.substring(2, 4);
    const second = time.substring(4, 6);
    return new Date(`${date}T${hour}:${minute}:${second}`);
}

if (require.main === module) {
    runLogCleanup();
}
